from django.test import TestCase
from .models import Product, Brand, ProductImage
from django.core.files.uploadedfile import SimpleUploadedFile


class ProductModelTests(TestCase):
    def setUp(self):
        self.brand = Brand.objects.create(name="Zentime Test")

    def test_sku_autogenerated(self):
        p = Product.objects.create(
            title="Solar Chrono", price=100, stock_qty=5, brand=self.brand)
        self.assertIsNotNone(p.sku)
        self.assertGreater(len(p.sku), 4)

    def test_primary_image_unique(self):
        p = Product.objects.create(title="Lunar", price=50, stock_qty=3)
        img_content = b"filecontent"
        img1 = ProductImage.objects.create(product=p, image=SimpleUploadedFile(
            "a.jpg", img_content, content_type="image/jpeg"), is_primary=True)
        img2 = ProductImage.objects.create(product=p, image=SimpleUploadedFile(
            "b.jpg", img_content, content_type="image/jpeg"), is_primary=True)
        # Reload from DB
        img1.refresh_from_db()
        img2.refresh_from_db()
        primaries = p.images.filter(is_primary=True).count()
        self.assertEqual(primaries, 1)
        self.assertTrue(img2.is_primary or img1.is_primary)

    def test_reservation_flow(self):
        p = Product.objects.create(title="ReserveTest", price=10, stock_qty=5)
        self.assertTrue(p.in_stock)
        p.reserve(2)
        p.refresh_from_db()
        self.assertEqual(p.reserved_qty, 2)
        self.assertEqual(p.available_qty, 3)
        p.commit_sale(2)
        p.refresh_from_db()
        self.assertEqual(p.stock_qty, 3)
        self.assertEqual(p.reserved_qty, 0)
        p.release(1)  # releasing after sale should be no-op
        p.refresh_from_db()
        self.assertEqual(p.reserved_qty, 0)
